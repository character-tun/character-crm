[{"filePath":"/Users/admin/character crm/middleware/auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"const jwt = require('jsonwebtoken');\n// Lazy-load UserToken inside functions to avoid mongoose compile during tests\n\nconst withUser = (req, res, next) => {\n  const auth = req.headers.authorization || '';\n  const secret = process.env.JWT_SECRET || 'dev_secret';\n  let user = null;\n\n  if (auth.startsWith('Bearer ')) {\n    const token = auth.slice(7);\n    try {\n      user = jwt.verify(token, secret);\n    } catch (e) {\n      user = null; // invalid or expired token\n    }\n  }\n\n  if (!user) {\n    const id = req.headers['x-user-id'] || '';\n    const role = req.headers['x-user-role'] || '';\n    const email = req.headers['x-user-email'] || '';\n    const name = req.headers['x-user-name'] || '';\n    const roles = role ? [role] : [];\n    user = {\n      id, email, role: role || null, roles, name: name || id || '',\n    };\n  }\n\n  req.user = user;\n  return next();\n};\n\nconst requireAuth = (req, res, next) => {\n  const u = req.user;\n  if (!u || !u.id) {\n    return res.status(401).json({ msg: 'Необходима авторизация' });\n  }\n  return next();\n};\n\n// RBAC permissions map (resource.action -> allowed roles)\nconst RBAC_MAP = {\n  'orderTypes.read': ['Admin', 'Manager'],\n  'orderTypes.write': ['Admin'],\n  'uiTheme.read': ['Admin', 'Manager'],\n  'uiTheme.write': ['Admin'],\n\n  'payments.read': ['Admin', 'Finance'],\n  'payments.write': ['Admin', 'Finance'],\n  'payments.lock': ['Admin', 'Finance'],\n  'cash.read': ['Admin', 'Finance'],\n  'cash.write': ['Admin'],\n};\n\nconst requireRoles = (...roles) => (req, res, next) => {\n  const u = req.user || {};\n  const required = new Set(roles);\n  const hasArray = Array.isArray(u.roles) && u.roles.some((r) => required.has(r));\n  const hasSingle = u.role && required.has(u.role);\n  if (!hasArray && !hasSingle) {\n    return res.status(403).json({ msg: 'Недостаточно прав' });\n  }\n  return next();\n};\n\n// Single-role guard convenience wrapper\nconst requireRole = (role) => (req, res, next) => requireRoles(role)(req, res, next);\n\n// Any-of list convenience wrapper (accepts array)\nconst requireAnyRole = (roles) => {\n  const list = Array.isArray(roles) ? roles : [roles];\n  return (req, res, next) => requireRoles(...list)(req, res, next);\n};\n\nconst userHasAnyRole = (user, roles) => {\n  const u = user || {};\n  const required = new Set(roles || []);\n  const hasArray = Array.isArray(u.roles) && u.roles.some((r) => required.has(r));\n  const hasSingle = u.role && required.has(u.role);\n  return !!(hasArray || hasSingle);\n};\n\nconst hasPermission = (reqOrUser, permission) => {\n  const u = reqOrUser && reqOrUser.user ? reqOrUser.user : reqOrUser;\n  const roles = RBAC_MAP[permission] || [];\n  if (!roles.length) return false; // unknown permission => deny\n  return userHasAnyRole(u, roles);\n};\n\nconst requirePermission = (permission) => (req, res, next) => {\n  if (!hasPermission(req, permission)) {\n    return res.status(403).json({ msg: 'Недостаточно прав' });\n  }\n  return next();\n};\n\nconst signToken = async (user) => {\n  const payload = { id: user.id, role: user.role };\n  const token = jwt.sign(payload, process.env.JWT_SECRET || 'dev-secret', { expiresIn: '1h' });\n  return token;\n};\n\nconst verifyToken = async (token) => {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET || 'dev-secret');\n  } catch (e) {\n    return null;\n  }\n};\n\n// Revoke all refresh tokens for a user (use on password reset)\nconst revokeAll = async (userId) => {\n  if (!userId) throw new Error('userId is required');\n  const UserToken = require('../models/UserToken');\n  const res = await UserToken.deleteMany({ user_id: userId });\n  return { ok: true, deletedCount: (res && res.deletedCount) || 0 };\n};\n\nmodule.exports = {\n  withUser,\n  requireAuth,\n  requireRoles,\n  requireRole,\n  requireAnyRole,\n  RBAC_MAP,\n  hasPermission,\n  requirePermission,\n  signToken,\n  verifyToken,\n  revokeAll,\n};\n","usedDeprecatedRules":[{"ruleId":"arrow-parens","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"generator-star-spacing","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"yield-star-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"block-spacing","replacedBy":[]},{"ruleId":"brace-style","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"comma-spacing","replacedBy":[]},{"ruleId":"comma-style","replacedBy":[]},{"ruleId":"computed-property-spacing","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"function-call-argument-newline","replacedBy":[]},{"ruleId":"func-call-spacing","replacedBy":[]},{"ruleId":"function-paren-newline","replacedBy":[]},{"ruleId":"implicit-arrow-linebreak","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"key-spacing","replacedBy":[]},{"ruleId":"keyword-spacing","replacedBy":[]},{"ruleId":"linebreak-style","replacedBy":[]},{"ruleId":"lines-between-class-members","replacedBy":[]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"newline-per-chained-call","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"no-tabs","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"nonblock-statement-body-position","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"object-curly-newline","replacedBy":[]},{"ruleId":"object-property-newline","replacedBy":[]},{"ruleId":"one-var-declaration-per-line","replacedBy":[]},{"ruleId":"operator-linebreak","replacedBy":[]},{"ruleId":"padded-blocks","replacedBy":[]},{"ruleId":"quote-props","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"semi-spacing","replacedBy":[]},{"ruleId":"semi-style","replacedBy":[]},{"ruleId":"space-before-blocks","replacedBy":[]},{"ruleId":"space-before-function-paren","replacedBy":[]},{"ruleId":"space-in-parens","replacedBy":[]},{"ruleId":"space-infix-ops","replacedBy":[]},{"ruleId":"space-unary-ops","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"switch-colon-spacing","replacedBy":[]},{"ruleId":"template-tag-spacing","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"no-floating-decimal","replacedBy":[]},{"ruleId":"no-multi-spaces","replacedBy":[]},{"ruleId":"no-return-await","replacedBy":[]},{"ruleId":"wrap-iife","replacedBy":[]}]}]